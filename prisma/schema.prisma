// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id       Int    @id     @default(autoincrement()) @map("id")
  userName String @unique @map("userName")
  nickname String @map("nickname")
  password String @map("password")
  
  posts       Posts[]
  options     Options[]
  comments    Comments[]
  voteHistory VoteHistory[]
  likes       Likes[]

  @@map("Users")
}

model Posts {           
  id            Int       @id @default(autoincrement()) @map("id")
  title         String    @map("title")
  content       String    @db.Text @map("content")
  createdAt     DateTime  @default(now()) @map("createdAt")
  updatedAt     DateTime? @updatedAt @map("updatedAt")
  startDate     DateTime  @map("startDate")
  endDate       DateTime  @map("endDate")
  multiVote     Boolean   @default(false) @map("multiVote")
  commentsCount Int       @default(0) @map("commentsCount")
  userId        Int       @map("userId")

  users Users[]
  options Options[]
  comments Comments[]
  likes Likes[]

  @@map("Posts")
}

model Options{
  id           Int      @id @default(autoincrement()) @map("id")
  content      String   @map("content")
  count        Int      @map("count")

  postId       Int      @map("postId")
  userId       Int      @map("userId")
  voteId       Int      @map("voteId")

  voteHistory VoteHistory[]
  
  post         Posts       @relation(fields:[postId], references: [id], onDelete: Cascade)
  user         Users       @relation(fields:[userId], references: [id], onDelete: Cascade)

  @@map("Options")
}

model Comments {
  id          Int      @id @default(autoincrement()) @map("id")
  content     String   @db.Text @map("content")
  createdAt   DateTime @default(now()) @map("createdAt")

  userId      Int @map("userId")
  postId      Int @map("postId")

  user        Users @relation(fields: [userId], references: [id], onDelete: Cascade)
  post        Posts @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("Comments")
}

model VoteHistory {
  id          Int      @id @default(autoincrement()) @map("id")
  userId      Int      @map("userId")
  optionId    Int      @map("optionId")

  user        Users   @relation(fields: [userId], references: [id], onDelete: Cascade)
  option      Options @relation(fields: [optionId], references: [id], onDelete: Cascade)

  @@map("VoteHistory")
}

model Likes {
  id          Int      @id @default(autoincrement()) @map("id")
  check       Boolean  @default(false)

  userId      Int @map("userId")
  postId      Int @map("postId")

  user        Users @relation(fields: [userId], references: [id], onDelete: Cascade)
  post        Posts @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("Likes")
}